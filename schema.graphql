enum ApproveStatus {
  default
  cancelled
  confirmed
}

type Block @entity {
  id: ID! # block hash
  number: BigInt
  parentHash: String
  specVersion: Int
  timestamp: Date

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID! # extrinsic hash
  args: String
  isSigned: Boolean
  isSuccess: Boolean
  method: String
  nonce: BigInt
  section: String
  signature: String
  timestamp: Date
  tip: BigInt

  block: Block # create relation to block
  signer: Account # create relation to Account
  events: [Event] @derivedFrom(field: "extrinsic")
}

type Event @entity {
  id: ID! # blockNumber-eventIdx
  data: String!
  index: Int!
  method: String!
  section: String!
  timestamp: Date

  block: Block # create relation to block
  extrinsic: Extrinsic # create relation to extrinsic
}

type MultisigAccount @entity {
  id: ID! # multisigAccountId (address)
  members: [String!]!
  threshold: Int!

  record: [MultisigRecord] @derivedFrom(field: "multisigAccount")
}

type MultisigRecord @entity {
  id: ID! # multisigAccountId-blockNumber-extrinsicIdx
  approvals: [String!]
  createExtrinsicIdx: String! # blockNumber-extrinsicIdx
  confirmExtrinsicIdx: String
  cancelExtrinsicIdx: String
  module: String!
  method: String!
  timestamp: Date

  status: ApproveStatus! # default/cancelled/confirmed
  multisigAccount: MultisigAccount!
  confirmBlock: Block
  block: Block!
}

type ApproveRecord @entity {
  id: ID! # accountId-blockNumber-extrinsicIdx
  account: String! # approve account address
  callHash: String!

  multisigRecord: MultisigRecord!
}

type Account @entity {
  id: ID! # accountId
  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
}

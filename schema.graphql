enum ApproveStatus {
  default
  cancelled
  confirmed
}

enum BatchStatus {
  completed
  interrupted
}

type Block @entity {
  id: ID! # block hash
  number: BigInt
  parentHash: String
  specVersion: Int
  timestamp: Date

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID! # extrinsic hash
  args: String
  method: String
  nonce: BigInt
  isSigned: Boolean
  isSuccess: Boolean
  section: String
  signature: String
  timestamp: Date
  tip: BigInt
  signer: Account # create relation to Account
  block: Block # create relation to block
  events: [Event] @derivedFrom(field: "extrinsic")
}

type Event @entity {
  id: ID! # blockNumber-eventIdx
  index: Int!
  section: String!
  method: String!
  data: String!
  timestamp: Date

  block: Block # create relation to block
  extrinsic: Extrinsic # create relation to extrinsic
}

type MultisigAccount @entity {
  id: ID! # multisigAccountId (address)
  threshold: Int!
  members: [String!]!

  record: [MultisigRecord] @derivedFrom(field: "multisigAccount")
}

type MultisigRecord @entity {
  id: ID! # multisigAccountId-blockHeight-extrinsicIdx
  createExtrinsicIdx: String! # blockHeight-extrinsicIdx
  module: String!
  method: String!
  multisigAccount: MultisigAccount!
  timestamp: Date
  block: Block!
  confirmBlock: Block
  status: ApproveStatus! # default/cancelled/confirmed
  confirmExtrinsicIdx: String
  cancelExtrinsicIdx: String
  approvals: [String!]
}

type ApproveRecord @entity {
  id: ID! # accountId-blockHeight-extrinsicIdx
  account: String! # approve account address
  multisigRecord: MultisigRecord!
  callHash: String!
}

type Token @entity {
  id: ID!

  name: String
  decimals: BigInt!
}

type Account @entity {
  id: ID! # accountId
  transferTotalCount: Int

  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
  transferFrom: [Transfer!]! @derivedFrom(field: "from")
  transferTo: [Transfer!]! @derivedFrom(field: "to")
}

type Transfer @entity {
  id: ID! # blockNumber-eventIdx
  from: Account!
  to: Account!
  token: Token
  amount: BigInt!
  timestamp: Date!
  extrinsicHash: String
  status: Boolean!
  fees: BigInt!

  block: Block # create relation to Block
}

# here callNumber is call index
type CallRecord @entity {
  id: ID! # callNumber-extrinsicIdx
  index: Int!
  module: String!
  name: String!
  paramDestId: String!
  paramValue: BigInt!

  # batchRecord: BatchRecord
}

type BatchRecord @entity {
  id: ID! # blockHeight-callNumber-extrinsicIdx
  extrinsicHash: String
  status: BatchStatus!
  module: String! # utility
  method: String! # batch
  timestamp: Date!
  confirmExtrinsicIdx: String
  cancelExtrinsicIdx: String
  signature: String

  sender: Account!
  block: Block # create relation to Block
  extrinsics: Extrinsic # create relation to Extrinsic
  # callRecord: [CallRecord] @derivedFrom(field: "batchRecord")
}
